import java.io.*;
import java.math.*;
import java.security.*;
import java.text.*;
import java.util.*;
import java.util.concurrent.*;
import java.util.regex.*;

public class Solution {
    
    static int max(int x,int y){
        if(x>y){
            return x;
        }
        else if (y>x){
            return y;
        }
        else {
            return x;
        }
    }
    
    // Complete the longestCommonSubsequence function below.
    static int[] longestCommonSubsequence(int[] S1, int[] S2) {
int m = S1.length;
int n = S2.length;
int[][] dpTable = new int[m+1][n+1];
    for(int i=1;i<=m;i++){
        for(int j=1;j<=n;j++){
            if(S1[i-1]==(S2[j-1])){
                dpTable[i][j] = dpTable[i-1][j-1]+1;
            }
            else{
                dpTable[i][j]= max(dpTable[i-1][j],dpTable[i][j-1]);
            }
        }
    }
   // System.out.println("Resultant Longest Common Subsequence length is : "+dpTable[m][n]);
   int[] sol=new int[dpTable[m][n]];
    //Finding sequence
    int i=m,j=n;
    int count=dpTable[m][n]-1;
    while(i>0&&j>0){
       // System.out.println(count++);
        //System.out.println(S1[i-1]+" "+S2[j-1]);
            if(S1[i-1]==(S2[j-1])){
                //System.out.println(S1[i-1]);
                sol[count] =S1[i-1] ;
                count--;
                i=i-1;
                j=j-1;
                
            }
            
            else{
                if(dpTable[i-1][j]>dpTable[i][j-1]){
                    i-=1;
                }
                else{
                    j-=1;
                }
            }
        
    }
    return sol;


    }

    private static final Scanner scanner = new Scanner(System.in);

    public static void main(String[] args) throws IOException {
        BufferedWriter bufferedWriter = new BufferedWriter(new FileWriter(System.getenv("OUTPUT_PATH")));

        String[] nm = scanner.nextLine().split(" ");

        int n = Integer.parseInt(nm[0]);

        int m = Integer.parseInt(nm[1]);

        int[] a = new int[n];

        String[] aItems = scanner.nextLine().split(" ");
        scanner.skip("(\r\n|[\n\r\u2028\u2029\u0085])?");

        for (int i = 0; i < n; i++) {
            int aItem = Integer.parseInt(aItems[i]);
            a[i] = aItem;
        }

        int[] b = new int[m];

        String[] bItems = scanner.nextLine().split(" ");
        scanner.skip("(\r\n|[\n\r\u2028\u2029\u0085])?");

        for (int i = 0; i < m; i++) {
            int bItem = Integer.parseInt(bItems[i]);
            b[i] = bItem;
        }

        int[] result = longestCommonSubsequence(a, b);

        for (int i = 0; i < result.length; i++) {
            bufferedWriter.write(String.valueOf(result[i]));

            if (i != result.length - 1) {
                bufferedWriter.write(" ");
            }
        }

        bufferedWriter.newLine();

        bufferedWriter.close();

        scanner.close();
    }
}
